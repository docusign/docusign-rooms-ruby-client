=begin
#DocuSign Rooms API - v2

#An API for an integrator to access the features of DocuSign Rooms

OpenAPI spec version: v2
Contact: devcenter@docusign.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'date'

module DocuSign_Rooms
  class Permissions
    attr_accessor :can_add_users_to_rooms

    attr_accessor :can_create_rooms

    attr_accessor :can_submit_rooms_for_review

    attr_accessor :can_close_rooms

    attr_accessor :can_reopen_rooms

    attr_accessor :can_delete_owned_rooms

    attr_accessor :auto_access_to_rooms

    attr_accessor :can_export_room_activity_details_people

    attr_accessor :can_copy_room_details

    attr_accessor :can_edit_any_room_role

    attr_accessor :can_edit_invited_room_role

    attr_accessor :can_edit_room_side

    attr_accessor :can_manage_any_user_room_access

    attr_accessor :can_manage_invited_user_room_access

    attr_accessor :is_hidden_in_room

    attr_accessor :can_manage_room_owners

    attr_accessor :can_delete_rooms

    attr_accessor :can_connect_to_mortgage_cadence

    attr_accessor :auto_access_to_rooms_in_office_only

    attr_accessor :can_view_room_details

    attr_accessor :can_view_and_edit_room_details

    attr_accessor :can_send_room_details_to_lone_wolf

    attr_accessor :can_add_documents

    attr_accessor :can_add_documents_from_form_groups

    attr_accessor :can_add_documents_from_form_libraries

    attr_accessor :documents_viewable_by_others_in_room_from_office

    attr_accessor :documents_auto_owned_by_peers

    attr_accessor :can_delete_owned_documents

    attr_accessor :can_delete_signed_documents

    attr_accessor :can_delete_unsigned_documents

    attr_accessor :can_manage_shared_docs

    attr_accessor :can_manage_form_groups

    attr_accessor :can_share_docs_not_owned

    attr_accessor :can_create_form_templates

    attr_accessor :can_manage_form_packets

    attr_accessor :can_add_tasks_to_any_task_lists

    attr_accessor :can_edit_editable_tasks

    attr_accessor :can_edit_any_tasks

    attr_accessor :can_delete_deletable_tasks

    attr_accessor :can_delete_any_tasks

    attr_accessor :can_apply_task_list

    attr_accessor :can_remove_any_task_list

    attr_accessor :can_submit_task_list

    attr_accessor :can_auto_submit_task_list

    attr_accessor :can_review_task_list

    attr_accessor :can_auto_approve_task_list

    attr_accessor :can_manage_task_templates_for_all_regions_all_offices

    attr_accessor :can_apply_room_templates

    attr_accessor :can_add_tasks_to_rooms

    attr_accessor :can_review_any_task

    attr_accessor :can_manage_docs_on_any_task

    attr_accessor :can_add_member_and_set_role_lower_access_level

    attr_accessor :can_add_member_and_set_role_same_access_level

    attr_accessor :can_change_member_role_lower_access_level

    attr_accessor :can_change_member_role_same_access_level

    attr_accessor :can_manage_member_lower_access_level

    attr_accessor :can_manage_member_same_access_level

    attr_accessor :can_remove_company_member_lower_access_level

    attr_accessor :can_remove_company_member_same_access_level

    attr_accessor :can_manage_account

    attr_accessor :can_manage_logo

    attr_accessor :can_manage_roles_and_permissions

    attr_accessor :can_manage_room_details

    attr_accessor :can_manage_room_templates

    attr_accessor :can_manage_integration_settings

    attr_accessor :can_export_company_usage_report

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'can_add_users_to_rooms' => :'canAddUsersToRooms',
        :'can_create_rooms' => :'canCreateRooms',
        :'can_submit_rooms_for_review' => :'canSubmitRoomsForReview',
        :'can_close_rooms' => :'canCloseRooms',
        :'can_reopen_rooms' => :'canReopenRooms',
        :'can_delete_owned_rooms' => :'canDeleteOwnedRooms',
        :'auto_access_to_rooms' => :'autoAccessToRooms',
        :'can_export_room_activity_details_people' => :'canExportRoomActivityDetailsPeople',
        :'can_copy_room_details' => :'canCopyRoomDetails',
        :'can_edit_any_room_role' => :'canEditAnyRoomRole',
        :'can_edit_invited_room_role' => :'canEditInvitedRoomRole',
        :'can_edit_room_side' => :'canEditRoomSide',
        :'can_manage_any_user_room_access' => :'canManageAnyUserRoomAccess',
        :'can_manage_invited_user_room_access' => :'canManageInvitedUserRoomAccess',
        :'is_hidden_in_room' => :'isHiddenInRoom',
        :'can_manage_room_owners' => :'canManageRoomOwners',
        :'can_delete_rooms' => :'canDeleteRooms',
        :'can_connect_to_mortgage_cadence' => :'canConnectToMortgageCadence',
        :'auto_access_to_rooms_in_office_only' => :'autoAccessToRoomsInOfficeOnly',
        :'can_view_room_details' => :'canViewRoomDetails',
        :'can_view_and_edit_room_details' => :'canViewAndEditRoomDetails',
        :'can_send_room_details_to_lone_wolf' => :'canSendRoomDetailsToLoneWolf',
        :'can_add_documents' => :'canAddDocuments',
        :'can_add_documents_from_form_groups' => :'canAddDocumentsFromFormGroups',
        :'can_add_documents_from_form_libraries' => :'canAddDocumentsFromFormLibraries',
        :'documents_viewable_by_others_in_room_from_office' => :'documentsViewableByOthersInRoomFromOffice',
        :'documents_auto_owned_by_peers' => :'documentsAutoOwnedByPeers',
        :'can_delete_owned_documents' => :'canDeleteOwnedDocuments',
        :'can_delete_signed_documents' => :'canDeleteSignedDocuments',
        :'can_delete_unsigned_documents' => :'canDeleteUnsignedDocuments',
        :'can_manage_shared_docs' => :'canManageSharedDocs',
        :'can_manage_form_groups' => :'canManageFormGroups',
        :'can_share_docs_not_owned' => :'canShareDocsNotOwned',
        :'can_create_form_templates' => :'canCreateFormTemplates',
        :'can_manage_form_packets' => :'canManageFormPackets',
        :'can_add_tasks_to_any_task_lists' => :'canAddTasksToAnyTaskLists',
        :'can_edit_editable_tasks' => :'canEditEditableTasks',
        :'can_edit_any_tasks' => :'canEditAnyTasks',
        :'can_delete_deletable_tasks' => :'canDeleteDeletableTasks',
        :'can_delete_any_tasks' => :'canDeleteAnyTasks',
        :'can_apply_task_list' => :'canApplyTaskList',
        :'can_remove_any_task_list' => :'canRemoveAnyTaskList',
        :'can_submit_task_list' => :'canSubmitTaskList',
        :'can_auto_submit_task_list' => :'canAutoSubmitTaskList',
        :'can_review_task_list' => :'canReviewTaskList',
        :'can_auto_approve_task_list' => :'canAutoApproveTaskList',
        :'can_manage_task_templates_for_all_regions_all_offices' => :'canManageTaskTemplatesForAllRegionsAllOffices',
        :'can_apply_room_templates' => :'canApplyRoomTemplates',
        :'can_add_tasks_to_rooms' => :'canAddTasksToRooms',
        :'can_review_any_task' => :'canReviewAnyTask',
        :'can_manage_docs_on_any_task' => :'canManageDocsOnAnyTask',
        :'can_add_member_and_set_role_lower_access_level' => :'canAddMemberAndSetRoleLowerAccessLevel',
        :'can_add_member_and_set_role_same_access_level' => :'canAddMemberAndSetRoleSameAccessLevel',
        :'can_change_member_role_lower_access_level' => :'canChangeMemberRoleLowerAccessLevel',
        :'can_change_member_role_same_access_level' => :'canChangeMemberRoleSameAccessLevel',
        :'can_manage_member_lower_access_level' => :'canManageMemberLowerAccessLevel',
        :'can_manage_member_same_access_level' => :'canManageMemberSameAccessLevel',
        :'can_remove_company_member_lower_access_level' => :'canRemoveCompanyMemberLowerAccessLevel',
        :'can_remove_company_member_same_access_level' => :'canRemoveCompanyMemberSameAccessLevel',
        :'can_manage_account' => :'canManageAccount',
        :'can_manage_logo' => :'canManageLogo',
        :'can_manage_roles_and_permissions' => :'canManageRolesAndPermissions',
        :'can_manage_room_details' => :'canManageRoomDetails',
        :'can_manage_room_templates' => :'canManageRoomTemplates',
        :'can_manage_integration_settings' => :'canManageIntegrationSettings',
        :'can_export_company_usage_report' => :'canExportCompanyUsageReport'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'can_add_users_to_rooms' => :'BOOLEAN',
        :'can_create_rooms' => :'BOOLEAN',
        :'can_submit_rooms_for_review' => :'BOOLEAN',
        :'can_close_rooms' => :'BOOLEAN',
        :'can_reopen_rooms' => :'BOOLEAN',
        :'can_delete_owned_rooms' => :'BOOLEAN',
        :'auto_access_to_rooms' => :'BOOLEAN',
        :'can_export_room_activity_details_people' => :'BOOLEAN',
        :'can_copy_room_details' => :'BOOLEAN',
        :'can_edit_any_room_role' => :'BOOLEAN',
        :'can_edit_invited_room_role' => :'BOOLEAN',
        :'can_edit_room_side' => :'BOOLEAN',
        :'can_manage_any_user_room_access' => :'BOOLEAN',
        :'can_manage_invited_user_room_access' => :'BOOLEAN',
        :'is_hidden_in_room' => :'BOOLEAN',
        :'can_manage_room_owners' => :'BOOLEAN',
        :'can_delete_rooms' => :'BOOLEAN',
        :'can_connect_to_mortgage_cadence' => :'BOOLEAN',
        :'auto_access_to_rooms_in_office_only' => :'BOOLEAN',
        :'can_view_room_details' => :'BOOLEAN',
        :'can_view_and_edit_room_details' => :'BOOLEAN',
        :'can_send_room_details_to_lone_wolf' => :'BOOLEAN',
        :'can_add_documents' => :'BOOLEAN',
        :'can_add_documents_from_form_groups' => :'BOOLEAN',
        :'can_add_documents_from_form_libraries' => :'BOOLEAN',
        :'documents_viewable_by_others_in_room_from_office' => :'BOOLEAN',
        :'documents_auto_owned_by_peers' => :'BOOLEAN',
        :'can_delete_owned_documents' => :'BOOLEAN',
        :'can_delete_signed_documents' => :'BOOLEAN',
        :'can_delete_unsigned_documents' => :'BOOLEAN',
        :'can_manage_shared_docs' => :'BOOLEAN',
        :'can_manage_form_groups' => :'BOOLEAN',
        :'can_share_docs_not_owned' => :'BOOLEAN',
        :'can_create_form_templates' => :'BOOLEAN',
        :'can_manage_form_packets' => :'BOOLEAN',
        :'can_add_tasks_to_any_task_lists' => :'BOOLEAN',
        :'can_edit_editable_tasks' => :'BOOLEAN',
        :'can_edit_any_tasks' => :'BOOLEAN',
        :'can_delete_deletable_tasks' => :'BOOLEAN',
        :'can_delete_any_tasks' => :'BOOLEAN',
        :'can_apply_task_list' => :'BOOLEAN',
        :'can_remove_any_task_list' => :'BOOLEAN',
        :'can_submit_task_list' => :'BOOLEAN',
        :'can_auto_submit_task_list' => :'BOOLEAN',
        :'can_review_task_list' => :'BOOLEAN',
        :'can_auto_approve_task_list' => :'BOOLEAN',
        :'can_manage_task_templates_for_all_regions_all_offices' => :'BOOLEAN',
        :'can_apply_room_templates' => :'BOOLEAN',
        :'can_add_tasks_to_rooms' => :'BOOLEAN',
        :'can_review_any_task' => :'BOOLEAN',
        :'can_manage_docs_on_any_task' => :'BOOLEAN',
        :'can_add_member_and_set_role_lower_access_level' => :'BOOLEAN',
        :'can_add_member_and_set_role_same_access_level' => :'BOOLEAN',
        :'can_change_member_role_lower_access_level' => :'BOOLEAN',
        :'can_change_member_role_same_access_level' => :'BOOLEAN',
        :'can_manage_member_lower_access_level' => :'BOOLEAN',
        :'can_manage_member_same_access_level' => :'BOOLEAN',
        :'can_remove_company_member_lower_access_level' => :'BOOLEAN',
        :'can_remove_company_member_same_access_level' => :'BOOLEAN',
        :'can_manage_account' => :'BOOLEAN',
        :'can_manage_logo' => :'BOOLEAN',
        :'can_manage_roles_and_permissions' => :'BOOLEAN',
        :'can_manage_room_details' => :'BOOLEAN',
        :'can_manage_room_templates' => :'BOOLEAN',
        :'can_manage_integration_settings' => :'BOOLEAN',
        :'can_export_company_usage_report' => :'BOOLEAN'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'canAddUsersToRooms')
        self.can_add_users_to_rooms = attributes[:'canAddUsersToRooms']
      end

      if attributes.has_key?(:'canCreateRooms')
        self.can_create_rooms = attributes[:'canCreateRooms']
      end

      if attributes.has_key?(:'canSubmitRoomsForReview')
        self.can_submit_rooms_for_review = attributes[:'canSubmitRoomsForReview']
      end

      if attributes.has_key?(:'canCloseRooms')
        self.can_close_rooms = attributes[:'canCloseRooms']
      end

      if attributes.has_key?(:'canReopenRooms')
        self.can_reopen_rooms = attributes[:'canReopenRooms']
      end

      if attributes.has_key?(:'canDeleteOwnedRooms')
        self.can_delete_owned_rooms = attributes[:'canDeleteOwnedRooms']
      end

      if attributes.has_key?(:'autoAccessToRooms')
        self.auto_access_to_rooms = attributes[:'autoAccessToRooms']
      end

      if attributes.has_key?(:'canExportRoomActivityDetailsPeople')
        self.can_export_room_activity_details_people = attributes[:'canExportRoomActivityDetailsPeople']
      end

      if attributes.has_key?(:'canCopyRoomDetails')
        self.can_copy_room_details = attributes[:'canCopyRoomDetails']
      end

      if attributes.has_key?(:'canEditAnyRoomRole')
        self.can_edit_any_room_role = attributes[:'canEditAnyRoomRole']
      end

      if attributes.has_key?(:'canEditInvitedRoomRole')
        self.can_edit_invited_room_role = attributes[:'canEditInvitedRoomRole']
      end

      if attributes.has_key?(:'canEditRoomSide')
        self.can_edit_room_side = attributes[:'canEditRoomSide']
      end

      if attributes.has_key?(:'canManageAnyUserRoomAccess')
        self.can_manage_any_user_room_access = attributes[:'canManageAnyUserRoomAccess']
      end

      if attributes.has_key?(:'canManageInvitedUserRoomAccess')
        self.can_manage_invited_user_room_access = attributes[:'canManageInvitedUserRoomAccess']
      end

      if attributes.has_key?(:'isHiddenInRoom')
        self.is_hidden_in_room = attributes[:'isHiddenInRoom']
      end

      if attributes.has_key?(:'canManageRoomOwners')
        self.can_manage_room_owners = attributes[:'canManageRoomOwners']
      end

      if attributes.has_key?(:'canDeleteRooms')
        self.can_delete_rooms = attributes[:'canDeleteRooms']
      end

      if attributes.has_key?(:'canConnectToMortgageCadence')
        self.can_connect_to_mortgage_cadence = attributes[:'canConnectToMortgageCadence']
      end

      if attributes.has_key?(:'autoAccessToRoomsInOfficeOnly')
        self.auto_access_to_rooms_in_office_only = attributes[:'autoAccessToRoomsInOfficeOnly']
      end

      if attributes.has_key?(:'canViewRoomDetails')
        self.can_view_room_details = attributes[:'canViewRoomDetails']
      end

      if attributes.has_key?(:'canViewAndEditRoomDetails')
        self.can_view_and_edit_room_details = attributes[:'canViewAndEditRoomDetails']
      end

      if attributes.has_key?(:'canSendRoomDetailsToLoneWolf')
        self.can_send_room_details_to_lone_wolf = attributes[:'canSendRoomDetailsToLoneWolf']
      end

      if attributes.has_key?(:'canAddDocuments')
        self.can_add_documents = attributes[:'canAddDocuments']
      end

      if attributes.has_key?(:'canAddDocumentsFromFormGroups')
        self.can_add_documents_from_form_groups = attributes[:'canAddDocumentsFromFormGroups']
      end

      if attributes.has_key?(:'canAddDocumentsFromFormLibraries')
        self.can_add_documents_from_form_libraries = attributes[:'canAddDocumentsFromFormLibraries']
      end

      if attributes.has_key?(:'documentsViewableByOthersInRoomFromOffice')
        self.documents_viewable_by_others_in_room_from_office = attributes[:'documentsViewableByOthersInRoomFromOffice']
      end

      if attributes.has_key?(:'documentsAutoOwnedByPeers')
        self.documents_auto_owned_by_peers = attributes[:'documentsAutoOwnedByPeers']
      end

      if attributes.has_key?(:'canDeleteOwnedDocuments')
        self.can_delete_owned_documents = attributes[:'canDeleteOwnedDocuments']
      end

      if attributes.has_key?(:'canDeleteSignedDocuments')
        self.can_delete_signed_documents = attributes[:'canDeleteSignedDocuments']
      end

      if attributes.has_key?(:'canDeleteUnsignedDocuments')
        self.can_delete_unsigned_documents = attributes[:'canDeleteUnsignedDocuments']
      end

      if attributes.has_key?(:'canManageSharedDocs')
        self.can_manage_shared_docs = attributes[:'canManageSharedDocs']
      end

      if attributes.has_key?(:'canManageFormGroups')
        self.can_manage_form_groups = attributes[:'canManageFormGroups']
      end

      if attributes.has_key?(:'canShareDocsNotOwned')
        self.can_share_docs_not_owned = attributes[:'canShareDocsNotOwned']
      end

      if attributes.has_key?(:'canCreateFormTemplates')
        self.can_create_form_templates = attributes[:'canCreateFormTemplates']
      end

      if attributes.has_key?(:'canManageFormPackets')
        self.can_manage_form_packets = attributes[:'canManageFormPackets']
      end

      if attributes.has_key?(:'canAddTasksToAnyTaskLists')
        self.can_add_tasks_to_any_task_lists = attributes[:'canAddTasksToAnyTaskLists']
      end

      if attributes.has_key?(:'canEditEditableTasks')
        self.can_edit_editable_tasks = attributes[:'canEditEditableTasks']
      end

      if attributes.has_key?(:'canEditAnyTasks')
        self.can_edit_any_tasks = attributes[:'canEditAnyTasks']
      end

      if attributes.has_key?(:'canDeleteDeletableTasks')
        self.can_delete_deletable_tasks = attributes[:'canDeleteDeletableTasks']
      end

      if attributes.has_key?(:'canDeleteAnyTasks')
        self.can_delete_any_tasks = attributes[:'canDeleteAnyTasks']
      end

      if attributes.has_key?(:'canApplyTaskList')
        self.can_apply_task_list = attributes[:'canApplyTaskList']
      end

      if attributes.has_key?(:'canRemoveAnyTaskList')
        self.can_remove_any_task_list = attributes[:'canRemoveAnyTaskList']
      end

      if attributes.has_key?(:'canSubmitTaskList')
        self.can_submit_task_list = attributes[:'canSubmitTaskList']
      end

      if attributes.has_key?(:'canAutoSubmitTaskList')
        self.can_auto_submit_task_list = attributes[:'canAutoSubmitTaskList']
      end

      if attributes.has_key?(:'canReviewTaskList')
        self.can_review_task_list = attributes[:'canReviewTaskList']
      end

      if attributes.has_key?(:'canAutoApproveTaskList')
        self.can_auto_approve_task_list = attributes[:'canAutoApproveTaskList']
      end

      if attributes.has_key?(:'canManageTaskTemplatesForAllRegionsAllOffices')
        self.can_manage_task_templates_for_all_regions_all_offices = attributes[:'canManageTaskTemplatesForAllRegionsAllOffices']
      end

      if attributes.has_key?(:'canApplyRoomTemplates')
        self.can_apply_room_templates = attributes[:'canApplyRoomTemplates']
      end

      if attributes.has_key?(:'canAddTasksToRooms')
        self.can_add_tasks_to_rooms = attributes[:'canAddTasksToRooms']
      end

      if attributes.has_key?(:'canReviewAnyTask')
        self.can_review_any_task = attributes[:'canReviewAnyTask']
      end

      if attributes.has_key?(:'canManageDocsOnAnyTask')
        self.can_manage_docs_on_any_task = attributes[:'canManageDocsOnAnyTask']
      end

      if attributes.has_key?(:'canAddMemberAndSetRoleLowerAccessLevel')
        self.can_add_member_and_set_role_lower_access_level = attributes[:'canAddMemberAndSetRoleLowerAccessLevel']
      end

      if attributes.has_key?(:'canAddMemberAndSetRoleSameAccessLevel')
        self.can_add_member_and_set_role_same_access_level = attributes[:'canAddMemberAndSetRoleSameAccessLevel']
      end

      if attributes.has_key?(:'canChangeMemberRoleLowerAccessLevel')
        self.can_change_member_role_lower_access_level = attributes[:'canChangeMemberRoleLowerAccessLevel']
      end

      if attributes.has_key?(:'canChangeMemberRoleSameAccessLevel')
        self.can_change_member_role_same_access_level = attributes[:'canChangeMemberRoleSameAccessLevel']
      end

      if attributes.has_key?(:'canManageMemberLowerAccessLevel')
        self.can_manage_member_lower_access_level = attributes[:'canManageMemberLowerAccessLevel']
      end

      if attributes.has_key?(:'canManageMemberSameAccessLevel')
        self.can_manage_member_same_access_level = attributes[:'canManageMemberSameAccessLevel']
      end

      if attributes.has_key?(:'canRemoveCompanyMemberLowerAccessLevel')
        self.can_remove_company_member_lower_access_level = attributes[:'canRemoveCompanyMemberLowerAccessLevel']
      end

      if attributes.has_key?(:'canRemoveCompanyMemberSameAccessLevel')
        self.can_remove_company_member_same_access_level = attributes[:'canRemoveCompanyMemberSameAccessLevel']
      end

      if attributes.has_key?(:'canManageAccount')
        self.can_manage_account = attributes[:'canManageAccount']
      end

      if attributes.has_key?(:'canManageLogo')
        self.can_manage_logo = attributes[:'canManageLogo']
      end

      if attributes.has_key?(:'canManageRolesAndPermissions')
        self.can_manage_roles_and_permissions = attributes[:'canManageRolesAndPermissions']
      end

      if attributes.has_key?(:'canManageRoomDetails')
        self.can_manage_room_details = attributes[:'canManageRoomDetails']
      end

      if attributes.has_key?(:'canManageRoomTemplates')
        self.can_manage_room_templates = attributes[:'canManageRoomTemplates']
      end

      if attributes.has_key?(:'canManageIntegrationSettings')
        self.can_manage_integration_settings = attributes[:'canManageIntegrationSettings']
      end

      if attributes.has_key?(:'canExportCompanyUsageReport')
        self.can_export_company_usage_report = attributes[:'canExportCompanyUsageReport']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          can_add_users_to_rooms == o.can_add_users_to_rooms &&
          can_create_rooms == o.can_create_rooms &&
          can_submit_rooms_for_review == o.can_submit_rooms_for_review &&
          can_close_rooms == o.can_close_rooms &&
          can_reopen_rooms == o.can_reopen_rooms &&
          can_delete_owned_rooms == o.can_delete_owned_rooms &&
          auto_access_to_rooms == o.auto_access_to_rooms &&
          can_export_room_activity_details_people == o.can_export_room_activity_details_people &&
          can_copy_room_details == o.can_copy_room_details &&
          can_edit_any_room_role == o.can_edit_any_room_role &&
          can_edit_invited_room_role == o.can_edit_invited_room_role &&
          can_edit_room_side == o.can_edit_room_side &&
          can_manage_any_user_room_access == o.can_manage_any_user_room_access &&
          can_manage_invited_user_room_access == o.can_manage_invited_user_room_access &&
          is_hidden_in_room == o.is_hidden_in_room &&
          can_manage_room_owners == o.can_manage_room_owners &&
          can_delete_rooms == o.can_delete_rooms &&
          can_connect_to_mortgage_cadence == o.can_connect_to_mortgage_cadence &&
          auto_access_to_rooms_in_office_only == o.auto_access_to_rooms_in_office_only &&
          can_view_room_details == o.can_view_room_details &&
          can_view_and_edit_room_details == o.can_view_and_edit_room_details &&
          can_send_room_details_to_lone_wolf == o.can_send_room_details_to_lone_wolf &&
          can_add_documents == o.can_add_documents &&
          can_add_documents_from_form_groups == o.can_add_documents_from_form_groups &&
          can_add_documents_from_form_libraries == o.can_add_documents_from_form_libraries &&
          documents_viewable_by_others_in_room_from_office == o.documents_viewable_by_others_in_room_from_office &&
          documents_auto_owned_by_peers == o.documents_auto_owned_by_peers &&
          can_delete_owned_documents == o.can_delete_owned_documents &&
          can_delete_signed_documents == o.can_delete_signed_documents &&
          can_delete_unsigned_documents == o.can_delete_unsigned_documents &&
          can_manage_shared_docs == o.can_manage_shared_docs &&
          can_manage_form_groups == o.can_manage_form_groups &&
          can_share_docs_not_owned == o.can_share_docs_not_owned &&
          can_create_form_templates == o.can_create_form_templates &&
          can_manage_form_packets == o.can_manage_form_packets &&
          can_add_tasks_to_any_task_lists == o.can_add_tasks_to_any_task_lists &&
          can_edit_editable_tasks == o.can_edit_editable_tasks &&
          can_edit_any_tasks == o.can_edit_any_tasks &&
          can_delete_deletable_tasks == o.can_delete_deletable_tasks &&
          can_delete_any_tasks == o.can_delete_any_tasks &&
          can_apply_task_list == o.can_apply_task_list &&
          can_remove_any_task_list == o.can_remove_any_task_list &&
          can_submit_task_list == o.can_submit_task_list &&
          can_auto_submit_task_list == o.can_auto_submit_task_list &&
          can_review_task_list == o.can_review_task_list &&
          can_auto_approve_task_list == o.can_auto_approve_task_list &&
          can_manage_task_templates_for_all_regions_all_offices == o.can_manage_task_templates_for_all_regions_all_offices &&
          can_apply_room_templates == o.can_apply_room_templates &&
          can_add_tasks_to_rooms == o.can_add_tasks_to_rooms &&
          can_review_any_task == o.can_review_any_task &&
          can_manage_docs_on_any_task == o.can_manage_docs_on_any_task &&
          can_add_member_and_set_role_lower_access_level == o.can_add_member_and_set_role_lower_access_level &&
          can_add_member_and_set_role_same_access_level == o.can_add_member_and_set_role_same_access_level &&
          can_change_member_role_lower_access_level == o.can_change_member_role_lower_access_level &&
          can_change_member_role_same_access_level == o.can_change_member_role_same_access_level &&
          can_manage_member_lower_access_level == o.can_manage_member_lower_access_level &&
          can_manage_member_same_access_level == o.can_manage_member_same_access_level &&
          can_remove_company_member_lower_access_level == o.can_remove_company_member_lower_access_level &&
          can_remove_company_member_same_access_level == o.can_remove_company_member_same_access_level &&
          can_manage_account == o.can_manage_account &&
          can_manage_logo == o.can_manage_logo &&
          can_manage_roles_and_permissions == o.can_manage_roles_and_permissions &&
          can_manage_room_details == o.can_manage_room_details &&
          can_manage_room_templates == o.can_manage_room_templates &&
          can_manage_integration_settings == o.can_manage_integration_settings &&
          can_export_company_usage_report == o.can_export_company_usage_report
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [can_add_users_to_rooms, can_create_rooms, can_submit_rooms_for_review, can_close_rooms, can_reopen_rooms, can_delete_owned_rooms, auto_access_to_rooms, can_export_room_activity_details_people, can_copy_room_details, can_edit_any_room_role, can_edit_invited_room_role, can_edit_room_side, can_manage_any_user_room_access, can_manage_invited_user_room_access, is_hidden_in_room, can_manage_room_owners, can_delete_rooms, can_connect_to_mortgage_cadence, auto_access_to_rooms_in_office_only, can_view_room_details, can_view_and_edit_room_details, can_send_room_details_to_lone_wolf, can_add_documents, can_add_documents_from_form_groups, can_add_documents_from_form_libraries, documents_viewable_by_others_in_room_from_office, documents_auto_owned_by_peers, can_delete_owned_documents, can_delete_signed_documents, can_delete_unsigned_documents, can_manage_shared_docs, can_manage_form_groups, can_share_docs_not_owned, can_create_form_templates, can_manage_form_packets, can_add_tasks_to_any_task_lists, can_edit_editable_tasks, can_edit_any_tasks, can_delete_deletable_tasks, can_delete_any_tasks, can_apply_task_list, can_remove_any_task_list, can_submit_task_list, can_auto_submit_task_list, can_review_task_list, can_auto_approve_task_list, can_manage_task_templates_for_all_regions_all_offices, can_apply_room_templates, can_add_tasks_to_rooms, can_review_any_task, can_manage_docs_on_any_task, can_add_member_and_set_role_lower_access_level, can_add_member_and_set_role_same_access_level, can_change_member_role_lower_access_level, can_change_member_role_same_access_level, can_manage_member_lower_access_level, can_manage_member_same_access_level, can_remove_company_member_lower_access_level, can_remove_company_member_same_access_level, can_manage_account, can_manage_logo, can_manage_roles_and_permissions, can_manage_room_details, can_manage_room_templates, can_manage_integration_settings, can_export_company_usage_report].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = DocuSign_Rooms.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
