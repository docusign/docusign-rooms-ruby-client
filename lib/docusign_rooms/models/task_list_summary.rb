=begin
#DocuSign Rooms API - v2

#An API for an integrator to access the features of DocuSign Rooms

OpenAPI spec version: v2
Contact: devcenter@docusign.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'date'

module DocuSign_Rooms
  class TaskListSummary
    attr_accessor :task_list_id

    attr_accessor :name

    attr_accessor :task_list_template_id

    attr_accessor :submitted_for_review_date

    attr_accessor :approval_date

    attr_accessor :rejected_date

    attr_accessor :created_date

    attr_accessor :approved_by_user_id

    attr_accessor :rejected_by_user_id

    attr_accessor :comment

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'task_list_id' => :'taskListId',
        :'name' => :'name',
        :'task_list_template_id' => :'taskListTemplateId',
        :'submitted_for_review_date' => :'submittedForReviewDate',
        :'approval_date' => :'approvalDate',
        :'rejected_date' => :'rejectedDate',
        :'created_date' => :'createdDate',
        :'approved_by_user_id' => :'approvedByUserId',
        :'rejected_by_user_id' => :'rejectedByUserId',
        :'comment' => :'comment'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'task_list_id' => :'Integer',
        :'name' => :'String',
        :'task_list_template_id' => :'Integer',
        :'submitted_for_review_date' => :'DateTime',
        :'approval_date' => :'DateTime',
        :'rejected_date' => :'DateTime',
        :'created_date' => :'DateTime',
        :'approved_by_user_id' => :'Integer',
        :'rejected_by_user_id' => :'Integer',
        :'comment' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'taskListId')
        self.task_list_id = attributes[:'taskListId']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'taskListTemplateId')
        self.task_list_template_id = attributes[:'taskListTemplateId']
      end

      if attributes.has_key?(:'submittedForReviewDate')
        self.submitted_for_review_date = attributes[:'submittedForReviewDate']
      end

      if attributes.has_key?(:'approvalDate')
        self.approval_date = attributes[:'approvalDate']
      end

      if attributes.has_key?(:'rejectedDate')
        self.rejected_date = attributes[:'rejectedDate']
      end

      if attributes.has_key?(:'createdDate')
        self.created_date = attributes[:'createdDate']
      end

      if attributes.has_key?(:'approvedByUserId')
        self.approved_by_user_id = attributes[:'approvedByUserId']
      end

      if attributes.has_key?(:'rejectedByUserId')
        self.rejected_by_user_id = attributes[:'rejectedByUserId']
      end

      if attributes.has_key?(:'comment')
        self.comment = attributes[:'comment']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          task_list_id == o.task_list_id &&
          name == o.name &&
          task_list_template_id == o.task_list_template_id &&
          submitted_for_review_date == o.submitted_for_review_date &&
          approval_date == o.approval_date &&
          rejected_date == o.rejected_date &&
          created_date == o.created_date &&
          approved_by_user_id == o.approved_by_user_id &&
          rejected_by_user_id == o.rejected_by_user_id &&
          comment == o.comment
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [task_list_id, name, task_list_template_id, submitted_for_review_date, approval_date, rejected_date, created_date, approved_by_user_id, rejected_by_user_id, comment].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = DocuSign_Rooms.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
