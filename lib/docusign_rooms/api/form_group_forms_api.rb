=begin
#DocuSign Rooms API - v2

#An API for an integrator to access the features of DocuSign Rooms

OpenAPI spec version: v2
Contact: devcenter@docusign.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module DocuSign_Rooms

  class GetFormGroupFormsOptions
    # Default value is 100 and max value is 100
    attr_accessor :count

    # Default value is 0
    attr_accessor :start_position

    def self.default
      @@default ||= GetFormGroupFormsOptions.new
    end
  end


  class FormGroupFormsApi
    attr_accessor :api_client

    def initialize(api_client = FormGroupFormsApi.default)
      @api_client = api_client
    end

    # Gets the user's form group's forms.
    # Get forms of the specified form group.
    # @param form_group_id The ID of the form group.
    # @param account_id (Required) The globally unique identifier (GUID) for the account.
    # @param DocuSign_Rooms::GetFormGroupFormsOptions Options for modifying the behavior of the function.
    # @return [FormGroupFormList]
    def get_form_group_forms(form_group_id, account_id, options = DocuSign_Rooms::GetFormGroupFormsOptions.default)
      data, _status_code, _headers = get_form_group_forms_with_http_info(form_group_id, account_id, options)
      return data
    end

    # Gets the user&#39;s form group&#39;s forms.
    # Get forms of the specified form group.
    # @param form_group_id The ID of the form group.
    # @param account_id (Required) The globally unique identifier (GUID) for the account.
    # @param DocuSign_Rooms::GetFormGroupFormsOptions Options for modifying the behavior of the function.
    # @return [Array<(FormGroupFormList, Fixnum, Hash)>] FormGroupFormList data, response status code and response headers
    def get_form_group_forms_with_http_info(form_group_id, account_id, options = DocuSign_Rooms::GetFormGroupFormsOptions.default)
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FormGroupFormsApi.get_form_group_forms ..."
      end
      # verify the required parameter 'form_group_id' is set
      fail ArgumentError, "Missing the required parameter 'form_group_id' when calling FormGroupFormsApi.get_form_group_forms" if form_group_id.nil?
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling FormGroupFormsApi.get_form_group_forms" if account_id.nil?
      # resource path
      local_var_path = "/v2/accounts/{accountId}/form_groups/{formGroupId}/forms".sub('{format}','json').sub('{' + 'formGroupId' + '}', form_group_id.to_s).sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'count'] = options.count if !options.count.nil?
      query_params[:'startPosition'] = options.start_position if !options.start_position.nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FormGroupFormList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FormGroupFormsApi#get_form_group_forms\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end