=begin
#DocuSign Rooms API - v2

#An API for an integrator to access the features of DocuSign Rooms

OpenAPI spec version: v2
Contact: devcenter@docusign.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module DocuSign_Rooms

  class GetRoleOptions
    # When set to true, the response includes the `isAssigned` property, which specifies whether the role is currently assigned to any users. The default is false.
    attr_accessor :include_is_assigned

    def self.default
      @@default ||= GetRoleOptions.new
    end
  end

  class GetRolesOptions
    # Returns assignable roles based on calling user's company permissions.               DEPRECATED: Please use filterContext parameter to get the assignable roles. AssignableRolesBasedOnCompanyPermissions returns same results as onlyAssignable=true
    attr_accessor :only_assignable

    # Attribute establishing filter context for roles being returned - AllRoles, AssignableRolesBasedOnCompanyPermissions, AssignableRolesBasedOnAllPermissions
    attr_accessor :filter_context

    # A search filter that returns roles by the beginning of the role name. You can enter the beginning of the role name only to return all of the roles that begin with the text that you entered.
    attr_accessor :filter

    # The starting zero-based index position of the result set. The default value is 0.
    attr_accessor :start_position

    # The number of results to return. This value must be a number between `1` and `100` (default).
    attr_accessor :count

    def self.default
      @@default ||= GetRolesOptions.new
    end
  end


  class RolesApi
    attr_accessor :api_client

    def initialize(api_client = RolesApi.default)
      @api_client = api_client
    end

    # Creates a role.
    # Creates a new company role in Rooms
    # @param account_id (Required) The globally unique identifier (GUID) for the account.
    # @param body Name and permission details of the role to be created (optional parameter)
    # @return [Role]
    def create_role(account_id, body)
      data, _status_code, _headers = create_role_with_http_info(account_id,  body)
      return data
    end

    # Creates a role.
    # Creates a new company role in Rooms
    # @param account_id (Required) The globally unique identifier (GUID) for the account.
    # @param body Name and permission details of the role to be created (optional parameter)
    # @return [Array<(Role, Fixnum, Hash)>] Role data, response status code and response headers
    def create_role_with_http_info(account_id, body)
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RolesApi.create_role ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling RolesApi.create_role" if account_id.nil?
      # resource path
      local_var_path = "/v2/accounts/{accountId}/roles".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json', 'application/xml', 'text/xml', 'application/*+xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Role')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#create_role\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes the role with the given roleId.
    # Deletes a role from a company account in Rooms
    # @param role_id The id of the role.
    # @param account_id (Required) The globally unique identifier (GUID) for the account.
    # @return [nil]
    def delete_role(role_id, account_id)
      delete_role_with_http_info(role_id, account_id)
      return nil
    end

    # Deletes the role with the given roleId.
    # Deletes a role from a company account in Rooms
    # @param role_id The id of the role.
    # @param account_id (Required) The globally unique identifier (GUID) for the account.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_role_with_http_info(role_id, account_id)
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RolesApi.delete_role ..."
      end
      # verify the required parameter 'role_id' is set
      fail ArgumentError, "Missing the required parameter 'role_id' when calling RolesApi.delete_role" if role_id.nil?
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling RolesApi.delete_role" if account_id.nil?
      # resource path
      local_var_path = "/v2/accounts/{accountId}/roles/{roleId}".sub('{format}','json').sub('{' + 'roleId' + '}', role_id.to_s).sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#delete_role\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get information about the role with the given roleId.
    # Get information about the role with the given roleId.
    # @param role_id The id of the role.
    # @param account_id (Required) The globally unique identifier (GUID) for the account.
    # @param DocuSign_Rooms::GetRoleOptions Options for modifying the behavior of the function.
    # @return [Role]
    def get_role(role_id, account_id, options = DocuSign_Rooms::GetRoleOptions.default)
      data, _status_code, _headers = get_role_with_http_info(role_id, account_id, options)
      return data
    end

    # Get information about the role with the given roleId.
    # Get information about the role with the given roleId.
    # @param role_id The id of the role.
    # @param account_id (Required) The globally unique identifier (GUID) for the account.
    # @param DocuSign_Rooms::GetRoleOptions Options for modifying the behavior of the function.
    # @return [Array<(Role, Fixnum, Hash)>] Role data, response status code and response headers
    def get_role_with_http_info(role_id, account_id, options = DocuSign_Rooms::GetRoleOptions.default)
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RolesApi.get_role ..."
      end
      # verify the required parameter 'role_id' is set
      fail ArgumentError, "Missing the required parameter 'role_id' when calling RolesApi.get_role" if role_id.nil?
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling RolesApi.get_role" if account_id.nil?
      # resource path
      local_var_path = "/v2/accounts/{accountId}/roles/{roleId}".sub('{format}','json').sub('{' + 'roleId' + '}', role_id.to_s).sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'includeIsAssigned'] = options.include_is_assigned if !options.include_is_assigned.nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Role')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#get_role\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets a paged-list of roles in your company
    # Returns a list of roles associated with a company account
    # @param account_id (Required) The globally unique identifier (GUID) for the account.
    # @param DocuSign_Rooms::GetRolesOptions Options for modifying the behavior of the function.
    # @return [RoleSummaryList]
    def get_roles(account_id, options = DocuSign_Rooms::GetRolesOptions.default)
      data, _status_code, _headers = get_roles_with_http_info(account_id, options)
      return data
    end

    # Gets a paged-list of roles in your company
    # Returns a list of roles associated with a company account
    # @param account_id (Required) The globally unique identifier (GUID) for the account.
    # @param DocuSign_Rooms::GetRolesOptions Options for modifying the behavior of the function.
    # @return [Array<(RoleSummaryList, Fixnum, Hash)>] RoleSummaryList data, response status code and response headers
    def get_roles_with_http_info(account_id, options = DocuSign_Rooms::GetRolesOptions.default)
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RolesApi.get_roles ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling RolesApi.get_roles" if account_id.nil?
      # resource path
      local_var_path = "/v2/accounts/{accountId}/roles".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'onlyAssignable'] = options.only_assignable if !options.only_assignable.nil?
      query_params[:'filterContext'] = options.filter_context if !options.filter_context.nil?
      query_params[:'filter'] = options.filter if !options.filter.nil?
      query_params[:'startPosition'] = options.start_position if !options.start_position.nil?
      query_params[:'count'] = options.count if !options.count.nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RoleSummaryList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#get_roles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates the role with the given roleId.
    # Updates the role with the given roleId.
    # @param role_id The id of the role.
    # @param account_id (Required) The globally unique identifier (GUID) for the account.
    # @param body Name and permission details of the role to be updated (optional parameter)
    # @return [Role]
    def update_role(role_id, account_id, body)
      data, _status_code, _headers = update_role_with_http_info(role_id, account_id,  body)
      return data
    end

    # Updates the role with the given roleId.
    # Updates the role with the given roleId.
    # @param role_id The id of the role.
    # @param account_id (Required) The globally unique identifier (GUID) for the account.
    # @param body Name and permission details of the role to be updated (optional parameter)
    # @return [Array<(Role, Fixnum, Hash)>] Role data, response status code and response headers
    def update_role_with_http_info(role_id, account_id, body)
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RolesApi.update_role ..."
      end
      # verify the required parameter 'role_id' is set
      fail ArgumentError, "Missing the required parameter 'role_id' when calling RolesApi.update_role" if role_id.nil?
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling RolesApi.update_role" if account_id.nil?
      # resource path
      local_var_path = "/v2/accounts/{accountId}/roles/{roleId}".sub('{format}','json').sub('{' + 'roleId' + '}', role_id.to_s).sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json', 'application/xml', 'text/xml', 'application/*+xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Role')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#update_role\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end