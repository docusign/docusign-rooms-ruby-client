=begin
#DocuSign Rooms API - v2

#An API for an integrator to access the features of DocuSign Rooms

OpenAPI spec version: v2
Contact: devcenter@docusign.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module DocuSign_Rooms

  class GetDocumentOptions
    # When set to **true**, includes the contents of the document in the `base64Contents` property of the response. The default value is **false**.
    attr_accessor :include_contents

    def self.default
      @@default ||= GetDocumentOptions.new
    end
  end


  class DocumentsApi
    attr_accessor :api_client

    def initialize(api_client = DocumentsApi.default)
      @api_client = api_client
    end

    # Grants access to a document for a user.
    # Grants a user access to a document. You specify the user's `userId` in the request body. The response is an object that specifies the access the user has.
    # @param document_id The id of the document.
    # @param account_id (Required) The globally unique identifier (GUID) for the account.
    # @param body  (optional parameter)
    # @return [DocumentUser]
    def create_document_user(document_id, account_id, body)
      data, _status_code, _headers = create_document_user_with_http_info(document_id, account_id,  body)
      return data
    end

    # Grants access to a document for a user.
    # Grants a user access to a document. You specify the user&#39;s &#x60;userId&#x60; in the request body. The response is an object that specifies the access the user has.
    # @param document_id The id of the document.
    # @param account_id (Required) The globally unique identifier (GUID) for the account.
    # @param body  (optional parameter)
    # @return [Array<(DocumentUser, Fixnum, Hash)>] DocumentUser data, response status code and response headers
    def create_document_user_with_http_info(document_id, account_id, body)
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DocumentsApi.create_document_user ..."
      end
      # verify the required parameter 'document_id' is set
      fail ArgumentError, "Missing the required parameter 'document_id' when calling DocumentsApi.create_document_user" if document_id.nil?
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling DocumentsApi.create_document_user" if account_id.nil?
      # resource path
      local_var_path = "/v2/accounts/{accountId}/documents/{documentId}/users".sub('{format}','json').sub('{' + 'documentId' + '}', document_id.to_s).sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DocumentUser')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentsApi#create_document_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes a document.
    # Permanently deletes a document. To find the `documentId` of a document that you want to delete, use the Rooms::GetDocuments method.\\n\\nIf the document is deleted successfully, the HTTP response code is 204 (No Content), so the response body is empty.
    # @param document_id The ID of the document.
    # @param account_id (Required) The globally unique identifier (GUID) for the account.
    # @return [nil]
    def delete_document(document_id, account_id)
      delete_document_with_http_info(document_id, account_id)
      return nil
    end

    # Deletes a document.
    # Permanently deletes a document. To find the &#x60;documentId&#x60; of a document that you want to delete, use the Rooms::GetDocuments method.\\n\\nIf the document is deleted successfully, the HTTP response code is 204 (No Content), so the response body is empty.
    # @param document_id The ID of the document.
    # @param account_id (Required) The globally unique identifier (GUID) for the account.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_document_with_http_info(document_id, account_id)
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DocumentsApi.delete_document ..."
      end
      # verify the required parameter 'document_id' is set
      fail ArgumentError, "Missing the required parameter 'document_id' when calling DocumentsApi.delete_document" if document_id.nil?
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling DocumentsApi.delete_document" if account_id.nil?
      # resource path
      local_var_path = "/v2/accounts/{accountId}/documents/{documentId}".sub('{format}','json').sub('{' + 'documentId' + '}', document_id.to_s).sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentsApi#delete_document\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get information about the Document with the given DocumentId.
    # Returns information about a document in a room. You can optionally request the contents of the document, which is returned in base64-encoded format.\\n\\nTo find the `documentId` of the document that you want to retrieve, use the Rooms::GetDocuments method.
    # @param document_id The id of the document.
    # @param account_id (Required) The globally unique identifier (GUID) for the account.
    # @param DocuSign_Rooms::GetDocumentOptions Options for modifying the behavior of the function.
    # @return [Document]
    def get_document(document_id, account_id, options = DocuSign_Rooms::GetDocumentOptions.default)
      data, _status_code, _headers = get_document_with_http_info(document_id, account_id, options)
      return data
    end

    # Get information about the Document with the given DocumentId.
    # Returns information about a document in a room. You can optionally request the contents of the document, which is returned in base64-encoded format.\\n\\nTo find the &#x60;documentId&#x60; of the document that you want to retrieve, use the Rooms::GetDocuments method.
    # @param document_id The id of the document.
    # @param account_id (Required) The globally unique identifier (GUID) for the account.
    # @param DocuSign_Rooms::GetDocumentOptions Options for modifying the behavior of the function.
    # @return [Array<(Document, Fixnum, Hash)>] Document data, response status code and response headers
    def get_document_with_http_info(document_id, account_id, options = DocuSign_Rooms::GetDocumentOptions.default)
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DocumentsApi.get_document ..."
      end
      # verify the required parameter 'document_id' is set
      fail ArgumentError, "Missing the required parameter 'document_id' when calling DocumentsApi.get_document" if document_id.nil?
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling DocumentsApi.get_document" if account_id.nil?
      # resource path
      local_var_path = "/v2/accounts/{accountId}/documents/{documentId}".sub('{format}','json').sub('{' + 'documentId' + '}', document_id.to_s).sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'includeContents'] = options.include_contents if !options.include_contents.nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Document')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentsApi#get_document\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end